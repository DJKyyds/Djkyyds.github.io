<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录学习时长的工具</title>
    <url>/post/0.html</url>
    <content><![CDATA[<h1 id="开发记录学习时长的工具"><a href="#开发记录学习时长的工具" class="headerlink" title="开发记录学习时长的工具"></a>开发记录学习时长的工具</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol>
<li>个人可以记录自己每日的工作、工作时长、工作打标签（工作进度、目标）</li>
<li>可以根据日历查看自己的工作（视图）</li>
<li>可以对一定周期内的工作进行分析（饼图、折线图、柱状图）</li>
</ol>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>1、前端：Vue3+ Vite2 +Ant Design Vue (桌面端)</p>
<ul>
<li>数据可视化：AntV G2</li>
<li>日期处理库：Day.js</li>
</ul>
<p>2、后端：SpringBoot + redis分布式登录</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>利用vite快速开发,这里我们使用yarn</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure>

<p>安装需要的组件</p>
<p>Vue Router</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add vue-router@4</span><br></pre></td></tr></table></figure>

<p>下载antdesignvue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add ant-design-vue</span><br></pre></td></tr></table></figure>

<p>使用Antv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @antv/g2</span><br></pre></td></tr></table></figure>

<h2 id="前端整合"><a href="#前端整合" class="headerlink" title="前端整合"></a>前端整合</h2><ol>
<li>Vite 初始化</li>
<li>Vue Router 整合，添加路由功能</li>
<li>Ant Design Vue 整合</li>
<li>整合 AntV G2，支持实例图表</li>
</ol>
<h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h2><ol>
<li>新增记录：表单页</li>
<li>展示记录：列表页</li>
<li>分析</li>
</ol>
<h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><ol>
<li>拉取通用模板，已经整合好了常用框架、用户登录用例等</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">后端模板</span><br><span class="line">https://github.com/DJKyyds/springbootinit</span><br></pre></td></tr></table></figure>

<p>2.设计库表</p>
<h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><h4 id="工作表"><a href="#工作表" class="headerlink" title="工作表"></a>工作表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: string;</span><br><span class="line">description: string;</span><br><span class="line">duration: number;</span><br><span class="line">tags: string[];</span><br><span class="line">planTime?: Date;</span><br><span class="line">createTime: Date;</span><br><span class="line">updateTime: Date;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id bigint</span><br><span class="line"></span><br><span class="line">任务名称 varchar</span><br><span class="line"></span><br><span class="line">描述 varchar</span><br><span class="line"></span><br><span class="line">时长 duration int</span><br><span class="line"></span><br><span class="line">tags varchar</span><br><span class="line"></span><br><span class="line">planTime 计划时间 datetime</span><br><span class="line"></span><br><span class="line">创建时间 datetime</span><br><span class="line"></span><br><span class="line">更新时间 datetime</span><br><span class="line"></span><br><span class="line">逻辑删除 tinyint 0 / 1</span><br></pre></td></tr></table></figure>

<h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 任务</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> work</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">256</span>)       <span class="keyword">null</span> comment <span class="string">&#x27;任务名称&#x27;</span>,</span><br><span class="line">    description text               <span class="keyword">null</span> comment <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">    duration    <span class="type">int</span>                <span class="keyword">null</span> comment <span class="string">&#x27;时长（秒）&#x27;</span>,</span><br><span class="line">    tags        <span class="type">varchar</span>(<span class="number">512</span>)       <span class="keyword">null</span> comment <span class="string">&#x27;标签列表json&#x27;</span>,</span><br><span class="line">    planTime    datetime comment <span class="string">&#x27;计划时间&#x27;</span>,</span><br><span class="line">    createTime  datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime  datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    isDelete    tinyint  <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;任务&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><h4 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h4><ol>
<li>校验参数</li>
<li>插入数据到数据库中</li>
</ol>
<p>查询任务列表</p>
<p>直接用接口文档在线测试</p>
<ul>
<li><p>关键点:为了方便修改，我们创建一个PageRequest</p>
<p><img src="file://C:\Users\a\AppData\Roaming\marktext\images\2022-08-08-16-12-48-image.png?msec=1659946368093"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.project.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用分页请求类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7351549463165389434L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="file://C:\Users\a\AppData\Roaming\marktext\images\2022-08-08-16-13-10-image.png?msec=1659946390187"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.project.model.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yupi.project.common.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.model.entity.Work;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户注册请求体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yupi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">604678205224377007L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Work work;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PageRequest pageRequest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.project.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.common.BaseResponse;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.common.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.common.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.common.ResultUtils;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.model.entity.Work;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.model.request.WorkRequest;</span><br><span class="line"><span class="keyword">import</span> com.yupi.project.service.WorkService;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.LifecycleState;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yupi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/work&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WorkService workService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;Long&gt; <span class="title function_">createWork</span><span class="params">(<span class="meta">@RequestBody</span> Work work)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (work == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(work.getName(), work.getDescription())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> workService.save(work);</span><br><span class="line">        <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.success(work.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">updateWork</span><span class="params">(<span class="meta">@RequestBody</span> Work work)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (work == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// todo 权限校验</span></span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (work.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> work.getName();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_NAME_LENGTH</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(name) &amp;&amp; name.length() &gt; MAX_NAME_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> workService.updateById(work);</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.success(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;List&lt;Work&gt;&gt; <span class="title function_">listWorkAll</span><span class="params">(Work work)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;Work&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        List&lt;Work&gt; listWork = workService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.success(listWork);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseResponse&lt;Page&lt;Work&gt;&gt; <span class="title function_">listWork</span><span class="params">(<span class="meta">@RequestBody</span> WorkRequest workRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NULL_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Work</span> <span class="variable">work</span> <span class="operator">=</span> workRequest.getWork();</span><br><span class="line">        <span class="type">PageRequest</span> <span class="variable">pageRequest</span> <span class="operator">=</span> workRequest.getPageRequest();</span><br><span class="line">        QueryWrapper&lt;Work&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (work != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> work.getName();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</span><br><span class="line">                queryWrapper.like(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Page&lt;Work&gt; pageData = workService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageRequest.getCurrent(), pageRequest.getSize()), queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.success(pageData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参数校验全在模板里面</p>
<h2 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h2><h3 id="分页实现"><a href="#分页实现" class="headerlink" title="分页实现"></a>分页实现</h3><ol>
<li>前端分页（一次请求全量数据，前端去计算每一页展示什么）</li>
<li>后端分页（一次请求一页的数据，前端页面时重新发请求去加载）</li>
</ol>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/DJKyyds/recordsStudyingTime.githttps://github.com/DJKyyds/recordsStudyingTime.git</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>力扣刷题</title>
    <url>/post/f7912a82.html</url>
    <content><![CDATA[<p>加油！加油！                                                                                                   </p>
<h2 id="判定字符是否唯一"><a href="#判定字符是否唯一" class="headerlink" title="判定字符是否唯一"></a><a href="https://leetcode.cn/problems/is-unique-lcci/">判定字符是否唯一</a></h2><p>实现一个算法，确定一个字符串 s 的所有字符是否全都不同。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;leetcode&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abc&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>限制：</p>
<p>0 &lt;&#x3D; len(s) &lt;&#x3D; 100<br>s[i]仅包含小写字母<br>如果你不使用额外的数据结构，会很加分。</p>
<p>之前一直使用的是c++，现在开始java</p>
<p>对于这道题我的思路很多首先想到的是直接两重循环，直接暴力不用考虑类型，然后是用标记，用数组标记，由于是字母，ASCII码不超过128。也可以使用位运算来实现，不过在这之使用了<code> |=</code> 标记当前位置有这个字母。当然也可用数据结构中的，HashSet，set等利用去重机制，判断是否有重复。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnique</span><span class="params">(String astr)</span> &#123;</span><br><span class="line">        <span class="comment">// 数组做</span></span><br><span class="line">        <span class="comment">// 因为字母编号不超过128 用数组做</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        charAt:方法返回指定索引处的char值</span></span><br><span class="line"><span class="comment">        int[] arr = new  int[128];</span></span><br><span class="line"><span class="comment">        for(int i = 0;i &lt; astr.length();i ++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if(arr[astr.charAt(i)]!=0)&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            arr[astr.charAt(i)]++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return true;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        位运算</span></span><br><span class="line"><span class="comment">        long类型是64位，大写字母&#x27;A&#x27;的ASCII码是65，小写字母&#x27;z&#x27;的ASCII码是122，</span></span><br><span class="line"><span class="comment">        两者相差58（122-65+1=58，加1是因为这里要包含大写字母&#x27;A&#x27;），是小于64的。</span></span><br><span class="line"><span class="comment">        |=:运算规则：两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">bits</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> astr.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">move</span> <span class="operator">=</span> astr.charAt(i) - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="comment">// System.out.println(move);</span></span><br><span class="line">            <span class="keyword">if</span> ((bits &amp; (<span class="number">1L</span> &lt;&lt; move)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//有重复的，直接返回false，加一</span></span><br><span class="line">                <span class="comment">//  System.out.println(bits +&quot;/n&quot;);</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//标记当前位置有这个字符</span></span><br><span class="line">                bits |= (<span class="number">1L</span> &lt;&lt; move);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判定是否互为字符重排"><a href="#判定是否互为字符重排" class="headerlink" title="判定是否互为字符重排"></a><a href="https://leetcode.cn/problems/check-permutation-lcci/">判定是否互为字符重排</a></h2><p>给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s1 = &quot;abc&quot;, s2 = &quot;bca&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s1 = &quot;abc&quot;, s2 = &quot;bad&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>0 &lt;&#x3D; len(s1) &lt;&#x3D; 100<br>0 &lt;&#x3D; len(s2) &lt;&#x3D; 100</p>
<p>首先，想到的是直接利用排序做，利用Arrays中的sort。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">CheckPermutation</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.length()!=s2.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] arr1 = s1.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] arr2 = s2.toCharArray();</span><br><span class="line">        Arrays.sort(arr1);</span><br><span class="line">        Arrays.sort(arr2);</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(arr1,arr2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用上一道题的思想。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">CheckPermutation</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.length()!=s2.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] table = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s1.length();i ++)&#123;</span><br><span class="line">            table[s1.charAt(i) - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s2.length();i ++)&#123;</span><br><span class="line">            table[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">            <span class="keyword">if</span>(table[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="每日一题-2022-8-1"><a href="#每日一题-2022-8-1" class="headerlink" title="每日一题 2022.8.1"></a>每日一题 2022.8.1</h2><h4 id="生成每种字符都是奇数个的字符串"><a href="#生成每种字符都是奇数个的字符串" class="headerlink" title="生成每种字符都是奇数个的字符串"></a><a href="https://leetcode.cn/problems/generate-a-string-with-characters-that-have-odd-counts/">生成每种字符都是奇数个的字符串</a></h4><p>给你一个整数 n，请你返回一个含 n 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。</p>
<p>返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：&quot;pppz&quot;</span><br><span class="line">解释：&quot;pppz&quot; 是一个满足题目要求的字符串，因为 &#x27;p&#x27; 出现 3 次，且 &#x27;z&#x27; 出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ohhh&quot; 和 &quot;love&quot;。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：&quot;xy&quot;</span><br><span class="line">解释：&quot;xy&quot; 是一个满足题目要求的字符串，因为 &#x27;x&#x27; 和 &#x27;y&#x27; 各出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ag&quot; 和 &quot;ur&quot;。</span><br></pre></td></tr></table></figure>

<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 7</span><br><span class="line">输出：&quot;holasss&quot;</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<p>1 &lt;&#x3D; n &lt;&#x3D; 500</p>
<p>解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateTheString</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ss.append(<span class="string">&quot;a&quot;</span>.repeat(n)).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ss.append(<span class="string">&quot;a&quot;</span>.repeat(n - <span class="number">1</span>)).append(<span class="string">&quot;b&quot;</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>StringBuffer</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以把任意类型添加到字符串缓冲区里面,并返回字符串缓冲区本身</span><br><span class="line">可变的String</span><br><span class="line">StringBuffer  a=new StringBuffer(&quot;abc&quot;);</span><br><span class="line">a.append(&quot;b&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="手写循环队列"><a href="#手写循环队列" class="headerlink" title="手写循环队列"></a>手写循环队列</h2><p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。</p>
<p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p>
<p>你的实现应该支持如下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyCircularQueue(k): 构造器，设置队列长度为 k 。</span><br><span class="line">Front: 从队首获取元素。如果队列为空，返回 -1 。</span><br><span class="line">Rear: 获取队尾元素。如果队列为空，返回 -1 。</span><br><span class="line">enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。</span><br><span class="line">deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。</span><br><span class="line">isEmpty(): 检查循环队列是否为空。</span><br><span class="line">isFull(): 检查循环队列是否已满。</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCircularQueue</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        len = k + <span class="number">1</span>;</span><br><span class="line">        str = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        front = end = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">enQueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str[end] = value;</span><br><span class="line">        end = (end + <span class="number">1</span>)%len;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        front = (front + <span class="number">1</span>)%len;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Front</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Rear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str[(end - <span class="number">1</span> + len)%len];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> end == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (end + <span class="number">1</span>)%len == front;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularQueue obj = new MyCircularQueue(k);</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.enQueue(value);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.deQueue();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.Front();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.Rear();</span></span><br><span class="line"><span class="comment"> * boolean param_5 = obj.isEmpty();</span></span><br><span class="line"><span class="comment"> * boolean param_6 = obj.isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="URL化"><a href="#URL化" class="headerlink" title="URL化"></a><a href="https://leetcode.cn/problems/string-to-url-lcci/">URL化</a></h2><p>URL化。编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：&quot;Mr John Smith &quot;, 13</span><br><span class="line">输出：&quot;Mr%20John%20Smith&quot;</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：&quot; &quot;, 5</span><br><span class="line">输出：&quot;%20%20%20%20%20&quot;</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<p>字符串长度在 [0, 500000] 范围内。</p>
<p>首先想到了Java自带API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpaces</span><span class="params">(String S, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="comment">//自带API</span></span><br><span class="line">        <span class="keyword">return</span> S.substring(<span class="number">0</span>,length).replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用数组做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpaces</span><span class="params">(String S, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="comment">//利用数组做</span></span><br><span class="line">        <span class="type">char</span>[] hh = <span class="keyword">new</span> <span class="title class_">char</span>[length*<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> S.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                hh[index++] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                hh[index++] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                hh[index++] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                hh[index++] = c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(hh, <span class="number">0</span>, index);</span><br><span class="line">        <span class="comment">//只取一部分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用StringBuilder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpaces</span><span class="params">(String S, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        StringBuilder 相对于StringBuffer 没有实现线程安全功能</span></span><br><span class="line"><span class="comment">        所以在实现方法中没有线程锁相对于实现快一些，个人理解</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> S.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回文排列"><a href="#回文排列" class="headerlink" title="回文排列"></a><a href="https://leetcode.cn/problems/palindrome-permutation-lcci/">回文排列</a></h2><p>给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。</p>
<p>回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。</p>
<p>回文串不一定是字典当中的单词。</p>
<p>示例1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：&quot;tactcoa&quot;</span><br><span class="line">输出：true（排列有&quot;tacocat&quot;、&quot;atcocta&quot;，等等）</span><br></pre></td></tr></table></figure>

<p>简单分析可知，当全为对子或者只有一个不为对子时，可以排列成回文。</p>
<p>利用表来做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPermutePalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Set&lt;Character&gt; ds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Character ch : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ds.add(ch))&#123;</span><br><span class="line">                ds.remove(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ds.size()&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用一个全局变量来记录奇偶个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPermutePalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Character ch : s.toCharArray())&#123;</span><br><span class="line">            <span class="comment">//如果当前位置的字符数量是奇数，再加上当前字符</span></span><br><span class="line">            <span class="comment">//正好是偶数，表示消掉一个，我们就把count减一，</span></span><br><span class="line">            <span class="comment">//否则count就加一</span></span><br><span class="line">            <span class="keyword">if</span>((map[ch]++&amp;<span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在二叉树中增加一行"><a href="#在二叉树中增加一行" class="headerlink" title="在二叉树中增加一行"></a><a href="https://leetcode.cn/problems/add-one-row-to-tree/">在二叉树中增加一行</a></h2><p>给定一个二叉树的根 root 和两个整数 val 和 depth ，在给定的深度 depth 处添加一个值为 val 的节点行。</p>
<p>注意，根节点 root 位于深度 1 。</p>
<p>加法规则如下:</p>
<ul>
<li><p>给定整数 depth，对于深度为 depth - 1 的每个非空树节点 cur ，创建两个值为 val 的树节点作为 cur 的左子树根和右子树根。</p>
</li>
<li><p>cur 原来的左子树应该是新的左子树根的左子树。</p>
</li>
<li><p>cur 原来的右子树应该是新的右子树根的右子树。</p>
</li>
<li><p>如果 depth &#x3D;&#x3D; 1 意味着 depth - 1 根本没有深度，那么创建一个树节点，值 val 作为整个原始树的新根，而原始树就是新根的左子树。</p>
</li>
</ul>
<p>示例 1:</p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [4,2,6,3,1,5], val = 1, depth = 2</span><br><span class="line">输出: [4,1,1,2,null,null,6,3,1,5]</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: root = [4,2,null,3,1], val = 1, depth = 3</span><br><span class="line">输出: [4,2,null,1,1,3,null,null,1]</span><br></pre></td></tr></table></figure>

<p>提示:</p>
<ul>
<li><p>节点数在 [1, 104] 范围内</p>
</li>
<li><p>树的深度在 [1, 104]范围内</p>
</li>
<li><p>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p>
</li>
<li><p>-105 &lt;&#x3D; val &lt;&#x3D; 105</p>
</li>
<li><p>1 &lt;&#x3D; depth &lt;&#x3D; the depth of tree + 1</p>
</li>
</ul>
<p>当输入depth 为 1 时，需要创建一个新的root，并将原 root 作为新root 的左子节点。当 depth 为 2 时，需要在root 下新增两个节点left 和 right 作为 root 的新子节点，并把原左子节点作为 left 的左子节点，把原右子节点作为right 的右子节点。当 depth 大于 2 时，需要继续递归往下层搜索，并将 depth 减去 1，直到搜索到depth 为 2。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">addOneRow</span><span class="params">(TreeNode root, <span class="type">int</span> val, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(depth == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val,root,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(depth == <span class="number">2</span>)&#123;</span><br><span class="line">            root.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val,root.left,<span class="literal">null</span>);</span><br><span class="line">            root.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val,<span class="literal">null</span>,root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            root.left = addOneRow(root.left,val,depth-<span class="number">1</span>);</span><br><span class="line">            root.right = addOneRow(root.right,val,depth-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
